/* ******************************************************************************************************************** */
/* 本节是我单独加的一节，目的是完善之前学习、看书过程中省略掉的语法实现实现（例如，之前我自己私自把结构体、类型转换等等语法功能做了省略） */
/* 后来，在看到抽象语法树章节的时候，因为是初学嘛，很多东西本来就不懂，我前面再一省略，更加不懂。甚至会把一些原本不该省略的东西给省略掉。 */
/* 所以，这里，我要重新检查之前省略了哪些东西，再把它补回来。																	*/
/* 这也算是一个警醒：在初学的时候，其实说穿了就是抄代码，先学会理解别人的东西，再去发明创造。										*/
/* ******************************************************************************************************************** */

/* ******************************************************************************************************************** */
/* 														词法分析 															*/
/* ******************************************************************************************************************** */

/* 描述了保留字规则 */
TOKEN: {
	//<token 名1 : 正则表达式1>
	<VOID		: "void">|
	<CHAR		: "char">|
	<SHORT		: "short">|
	<INT		: "int">|
	<LONG		: "long">|
	<STRUCT		: "struct">|
	<UNION		: "union">|
	<ENUM		: "enum">|
	<STATIC		: "static">|
	<EXTERN		: "extern">|
	<CONST		: "const">|
	<SIGNED		: "signed">|
	<UNSIGNED	: "unsigned">|
	<IF		    : "if">|
	<ELSE		: "else">|
	<SWITCH		: "switch">|
	<CASE		: "case">|
	<DEFAULT	: "default">|
	<WHILE		: "while">|
	<DO		    : "do">|
	<FOR		: "for">|
	<RETUEN		: "return">|
	<BREAK		: "break">|
	<CONTINUE	: "continue">|
	<GOTO		: "goto">|
	<TYPEDEF	: "typedef">|
	<IMPORT		: "import">|
	<SIZEOF		: "sizeof">|
}

/* 标识符规则: 首个字符是 字母、下划线, 后续字符是字母、数字、下划线。 */
TOKEN: {
	// identifier: 标识符
	<IDENTIFIER: ["a"-"z", "A"-"Z", "_"] ( ["0"-"9", "a"-"z", "A"-"Z", "_"] )*>
}

/* 数值 */
TOKEN: {
	<INTEGER: ["1"-"9"] 	(["0"-"9"])*			    		("U")? ("L")?|		// 第一条是 十进制
	"0"["x", "X"] 			(["0"-"9", "a"-"f", "A"-"F"])+		("U")? ("L")?|		// 第二条是 十六进制
	"0"(["0"-"7"])*						                		("U")? ("L")?		// 第三条是 八进制
	>
}

/* 跳过空白字符 */
SPECIAL_TOKEN: {
        <SPACES: ([" ", "\t", "\n", "\r", "\f"])+>
}

/* 跳过行注释 */
SPECIAL_TOKEN: {
        <LINE_COMMENT: "//" (~["\n", "\r"])* (["\n" | "\r\n" | "\r"])?>
}

/* 跳过块注释 */
MORE: { <"/*"> : IN_BLOCK_COMMENT }   // 状态迁移至IN_BLOCK_COMMENT
// 下面的两个语句,只要有一个不满足,就会报错
<IN_BLOCK_COMMENT> MORE: { <~[]> }    // 匹配任意字符
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <"*/"> : DEFAULT }

/* 扫描字符串字面量 */
MORE: { <"\""> : IN_STRING }            // 扫描到 " 时,跳转到 IN_STRING
										// " 后面跟的 不是 " \\ \n \t 或 eg: \\521 或 eg: \\任意东西
<IN_STRING> MORE: {     
        <(~["\"", "\\", "\n", "\t"])+> |
        <"\\"("0"-"7"){3}> |
        <"\\"(~[])>
}
<IN_STRING> TOKEN: { <STRING>: "\""> : DEFAULT }

/* 扫描字符字面量 */
MORE: { <"'"> : IN_CHARACTER }
<IN_CHARACTER> MORE: {
        <~["'", "\\", "\n", "\t"])> : CHARACTER_TERM
        | <"//"("0"-"7"){3}>        : CHARACTER_TERM
        | <"//"~[]>                 : CHARACTER_TERM
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT }

/* ******************************************************************************************************************** */
/* 														语法分析 															*/
/* ******************************************************************************************************************** */

/* 6.1 定义的分析 */
/* 表示程序文件整体的语法规则 */
compilation_unit(): {}
{
    // Cb文件的开头是数个import声明; 然后是函数声明; 最后是文件的结束标记
    import_stmts() top_defs() <EOF>
}

/* import声明列表的语法规则 */
import_stmts(): {}
{
    // 形如 import ... 的声明列表
    // 重复0次或多次,也就是说在一个Cb文件中,import语句可以没有也可以有很多个
    ( import_stmt() ) *     
}

/* import语句的语法规则 */
import_stmt(): {}
{
    // 形如	import stdio;
    //      import sys.types;
    <IMPORT> name() ( "."name() ) * ";"
}
name(): { }
{
  <IDENTIFIER>
}

/* 各类定义的语法: 包含变量定义 函数定义 结构体\联合体定义 结构体成员\联合体成员语法 typedef语句的语法 类型的语法。 */
top_defs: {}
{
    // 为了区分函数定义和变量定义：函数定义 与 变量定义 的区别在于是否出现左括号，如果出现左括号就是 函数定义，而不是变量定义。
    // LOOKAHEAD(3)是为了区分defvars、def_const、def_struct、def_union所向前看3个字符
    // 为什么不用 type()？？？ 不用name()了？？？
	( LOOKAHEAD( storage() typeref() <IDENTIFIER> "(" ) defun() | LOOKAHEAD(3) defvars() | defconst() | defstruct() | defunion() | typedef() ) *
}

/* 函数定义 */
defun(): { }
{
  	// name 是函数名 params是形参列表
  	// 为什么这里不用 type()了？？？
	storage() typeref() name() "(" params() ")"
	block()
}
/* 函数形参列表 */
params(): { }
{
  	// 要实现三种函数形参类型：	void
	//						定长，eg：int x, int y
	//						可变长度，eg：printf()
	LOOKAHEAD( <VOID> ")" ) <VOID>		// 为了区分void* 和void
	| fixedparams() ["," "..."]			// 定长和可变长度
}
/* 固定长度形参列表 */
fixedparams(): { }
{
	param() ( LOOKAHEAD(2) "," param() ) *
}
/* 参数 */
param(): { }
{
	// int x
	// 基本类型 标识符
	type() name()
}
/* 函数体 */
block(): { }
{
  // defvar_list() ：临时变量列表。在哪声明了？？？
	"{" defvar_list() stmts() "}"
}

/* 变量定义 */
defvars(): {}
{
    // eg：	int a;
    // 		int a = 20;
    // 		int a, b = 30;
    storage() type() name() ["=" expr()] ( "," name() ["=" expr()] ) * ";"
}

/* 代表static是否声明的意思（当然是可有可无了！） */
storage(): {}
{
    [<STATIC>]      // storage()是允许被省略的static
}

/* 结构体 联合体 定义 */
defstruct(): { }
{
	<STRUCT> name() memeber_list() ";"
}
defunion(): { }
{
	<UNION> name() memeber_list() ";"
}
memeber_list(): { }
{
	"{"
		( slot() ";" ) *
	"}"
}
slot(): { }
{
	//eg: int x
	type() name()
}
/* typedef语句 */
typedef： { }
{
	// eg：	typedef int myint;
	// 为什么这里不用 name() 而是又用 <IDENTIFIER> 了？？？
	<TYPEDEF> typeref() <IDENTIFIER> ";"
}

/* 类型的语法 */
type(): {}
{
    typeref()
}
typeref(): {}
{
    typeref_base()
    ( LOOKAHEAD(2)"[" "]"			// 不定长数组，eg：	int []a
      | "[" <INTEGER> "]"			// 定长数组，eg：		int [10]a
      | "*"							// 指针，eg：			int *a
      | "(" param_typerefs() ")"	// 函数指针    ) *
}

/* 基本类型的语法 */
typeref_base(): {}
{
    <VOID> | <CHAR> | <SHORT> | <INT> | <LONG>
    // unsigned char 和 unsigned short 等开头的规则是一样的，所以必须使用LOOKAHEAD来解决冲突。
    | LOOKAHEAD(2) <UNSIGNED> <CHAR>
    | LOOKAHEAD(2) <UNSIGNED> <SHORT>
    | LOOKAHEAD(2) <UNSIGNED> <INT>
    | <UNSIGNED> <LONG>
    | <STRUCT> <IDENTIFIER>
    | <UNION> <IDENTIFIER>
    | LOOKAHEAD( {isType(getToken(1).image)} ) <IDENTIFIER>
}

/* 6.2 语句的语法 */
/* 语句列表 */
stmts(): {}
{
    // 允许一个程序中什么语句都没有
    (stmt())*
}
stmt(): {}
{
    // 表达式直接跟;也代表一个语句
    // block是由{和}围起来的，也代表语句
    ";"
    | LOOKAHEAD(2) labeled_stmt()		// goto语句，eg：	on_error:
    | expr() ";"
    | block();
    | if_stmt()
    | while_stmt()
    | dowhile_stmt()
    | for_stmt()
    | switch_stmt()
    | break_stmt()
    | continue_stmt()
    | goto_stmt()
    | return_stmt()
}
/* if语句 */
// if最外围的两个花括号也是属于if语句，下面的while、for语句也是同样的。
if_stmt(): {}
{
    <IF> "(" expr() ")"
    "{"
        stmts()
    "}"
    [<ELSE>
    "{"
        stmts()
    "}"]

}
/* while语句 */
while_stmt(): {}
{
    <WHILE> "(" expr() ")"
    "{"
        stmt()
    "}"
}
/* for语句 */
for_stmt(): {}
{
    <FOR> "(" [expr()] ; [expr()] ; [expr()] ")"
    "{"
        stmt()
    "}"
}
/* break语句 */
break_stmt(): {}
{
    <BREAK>";"
}
/* continue语句 */
continue_stmt(): {}
{
   <CONTINUE>";"
}
/* return语句 */
return_stmt():{}
{
    LOOKAHEAD(2)<RETUEN> ";"		// return;
    <RETUEN> expr() ";"				// return a+b;
}
break_stmt(): { }
{
	<BREAK>";"
}

/* 6.3 表达式 expr() 的分析 */
// 前面的内容中，出现了很多次，本小节就对expr()进行语法规定。
// 本节需要注意的是：各个表达式是有优先级规定的。例如“×”比“+”的优先级高。所以，严格来说，各个表达式的树形结构所在的深度是不同的。具体可看书P83页。
expr:() {}
{
    // term() 是项，也就是运算符左边的东西，在C语言中左边的东西可以很复杂。我们留作下节完成。
    LOOKAHEAD(term() "=")
    term() "=" expr()			// 普通的赋值表达式
	LOOKAHEAD(term() opassign_op())
    term() opassign_op() expr()	// 自我赋值表达式，例如 +=，-=
    |expr10()						// 重要！这里使用expr10()代表比本赋值表达式优先级更高的表达式。
}
// 自我赋值表达式
opassign_op(): {}
{
    "+=" | "-=" | "*=" | "/="
    "%=" | "&=" | "|=" | "^="
    "<<=" | ">>="
}
// 条件表达式（即三元运算符）
expr10(): {}
{
    // 避免左递归
    expr9()["?" expr() ":" expr10()]
}
// 重要！下面将要规定二元运算符优先级
// exprN，N越低代表优先级越高。你也可以这样理解：N越大，应该先将其分割。
expr9(): {}
{
    expr8() ("||" expr8())*
}
expr8(): {}
{
    expr7() ("&&" expr7())*
}
expr7(): {}
{
    expr6() (
            ">" expr(6) | "<" expr(6)
            | ">=" expr(6) | "<=" expr(6)
            | "==" expr(6) | "!=" expr(6)
            )*
}
expr6(): {}
{
    expr5() ("|" expr5())*
}
expr5(): {}
{
    expr4() ("^" expr4())*
}
expr4(): {}
{
    expr3() ("&" expr3())*
}
expr3(): {}
{
    expr2() (">>" expr2() | "<<" expr2())*
}
expr2(): {}
{
    expr1() ("+" expr1() | "-" expr1())*
}
expr1(): {}
{
    term() ("*" term() | "/" term() | "%" term())*
}

/* 6.4 项的语法规则：等号左边的东西 */
// 表示项的符号是 term()
term(): {}
{
    // 这里，我们先不实现类型转换，仅仅考虑带有前置运算符项的情况
    // (int)name
    LOOKAHEAD( "(" type() ) "(" type()  ")" term()
  	| unary()
}
// 带有前置运算符的项的符号
unary(): {}
{
    "++"unary()
    | "--"unary()
    | "+"term()
    | "-"term()
    | "!"term()       	 		// 逻辑非
    | "~"term()       	 		// 按位取反
    | "*"term()       	 		// 引用
    | "&"term()       	 		// 取地址 
	| <SIZEOF> "(" type() ")"	// sizeof(int)
 	| <SIZEOF> unary()			// sizeof(2+3.14)
    | postfix()					// 后置运算符 
}
// 后置运算符
postfix(): {}
{
    primary()
    ("++"
    | "--"
    | "[" expr() "]"
    | "." name()
    | "->" name()
    | "(" args() ")"
    ) *
}
// 函数的调用，形如：add(参数1, 参数2);
args(): {}
{
    // 带中括号表示函数没有参数，例如一些系统调用函数就没有参数：exit(-1);
    [expr()( "," expr() ) * ]
}
// 最后我们还需要规定下primary()本身的格式
primary(): {}
{
    <INTEGER> | <STRING> | <CHARACTER> | <IDENTIFIER> | "(" expr() ")"
}